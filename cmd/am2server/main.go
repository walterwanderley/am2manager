// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http).

package main

import (
	"context"
	"database/sql"
	_ "embed"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"strings"
	"syscall"
	"time"

	"github.com/flowchartsman/swaggerui"
	"go.uber.org/automaxprocs/maxprocs"

	// database driver
	_ "modernc.org/sqlite"
)

//go:generate sqlc-http -m github.com/walterwanderley/am2manager/cmd/am2server -migration-path sql/migrations -i ^[a-z] -append

var (
	dbURL string
	port  int

	//go:embed openapi.yml
	openAPISpec []byte
)

func main() {
	var dev bool
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	flag.IntVar(&port, "port", 5000, "The server port")

	flag.BoolVar(&dev, "dev", false, "Set logger to development mode")

	flag.Parse()

	initLogger(dev)

	if err := run(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run() error {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	dbURL = os.ExpandEnv(dbURL)

	if !strings.Contains(dbURL, "?") {
		dbURL = dbURL + "?_pragma=busy_timeout(5000)&_pragma=sync(NORMAL)&_pragma=foreign_keys(1)&_pragma=journal_mode(WAL)&_txlock=immediate"
	}

	db, err := sql.Open("sqlite", dbURL)
	if err != nil {
		return err
	}
	defer db.Close()

	if err := ensureSchema(db); err != nil {
		return fmt.Errorf("migration error: %w", err)
	}

	mux := http.NewServeMux()
	registerHandlers(mux, db)
	mux.Handle("/swagger/", http.StripPrefix("/swagger", swaggerui.Handler(openAPISpec)))

	server := &http.Server{
		Addr:    fmt.Sprintf(":%d", port),
		Handler: mux,
		// Please, configure timeouts!
	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	slog.Info("Listening...", "port", port)
	return server.ListenAndServe()
}

func initLogger(dev bool) {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}
