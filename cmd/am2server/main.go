// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http).

package main

import (
	"context"
	"database/sql"
	"embed"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"strings"
	"syscall"
	"time"

	"github.com/flowchartsman/swaggerui"
	"github.com/walterwanderley/am2manager/cmd/am2server/internal/server"
	"github.com/walterwanderley/am2manager/cmd/am2server/internal/server/auth"
	"github.com/walterwanderley/am2manager/cmd/am2server/internal/server/etag"
	"github.com/walterwanderley/am2manager/cmd/am2server/internal/server/litestream"
	"github.com/walterwanderley/am2manager/cmd/am2server/templates"
	"go.uber.org/automaxprocs/maxprocs"

	// database driver
	_ "github.com/mattn/go-sqlite3"
)

//go:generate sqlc-http -m github.com/walterwanderley/am2manager/cmd/am2server -migration-path sql/migrations -go.mod ../../go.mod -i ^[a-z],GetCapture -litestream -append

var (
	dbURL          string
	dev            bool
	port           int
	replicationURL string

	//go:embed openapi.yml
	openAPISpec []byte
	//go:embed web
	webFS embed.FS
)

func main() {
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	flag.IntVar(&port, "port", 8080, "The server port")

	flag.BoolVar(&dev, "dev", false, "Set logger to development mode")

	flag.StringVar(&replicationURL, "replication", "", "S3 replication URL")

	flag.Parse()

	initLogger()

	if err := run(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run() error {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	if dbURL == "" {
		dbURL = os.Getenv("DSN")
	}

	dbURL = os.ExpandEnv(dbURL)

	if !strings.Contains(dbURL, "?") {
		dbURL = dbURL + "?_timeout=5000&_journal=WAL&_sync=NORMAL&_fk=true&_txlock=immediate"
	}

	if replicationURL == "" {
		replicationURL = os.Getenv("LITESTREAM_URL")
	}

	db, err := sql.Open("sqlite3", dbURL)
	if err != nil {
		return err
	}
	defer db.Close()

	if replicationURL != "" {
		slog.Info("replication", "url", replicationURL)
		lsdb, err := litestream.Replicate(context.Background(), dbURL, replicationURL)
		if err != nil {
			return fmt.Errorf("init replication error: %w", err)
		}
		defer lsdb.Close()
	}
	if err := ensureSchema(db); err != nil {
		return fmt.Errorf("migration error: %w", err)
	}

	mux := http.NewServeMux()
	registerHandlers(mux, db)
	mux.Handle("GET /swagger/", http.StripPrefix("/swagger", swaggerui.Handler(openAPISpec)))
	if dev {
		mux.Handle("GET /web/", http.StripPrefix("/web", http.FileServer(http.FS(os.DirFS("web")))))
	} else {
		mux.Handle("GET /web/", etag.Handler(webFS, ""))
	}
	templates.RegisterHandlers(mux, dev)

	mux.HandleFunc("GET /liveness", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
	})

	var handler http.Handler = mux
	if auth.Enabled() {
		if err := auth.Setup(mux, db); err != nil {
			slog.Error("setup auth", "error", err)
			os.Exit(-1)
		}
		handler = auth.UserContext(handler)
	}

	server := &http.Server{
		Addr:              fmt.Sprintf(":%d", port),
		Handler:           server.LoggingMiddleware(handler),
		WriteTimeout:      15 * time.Second,
		ReadTimeout:       15 * time.Second,
		ReadHeaderTimeout: 10 * time.Second,
		IdleTimeout:       30 * time.Second,
	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	slog.Info("Listening...", "port", port)
	return server.ListenAndServe()
}

func initLogger() {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}
