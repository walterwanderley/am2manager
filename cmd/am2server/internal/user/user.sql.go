// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package user

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :execresult
INSERT INTO user(login, email, pass, status) 
VALUES(?,?,?,?)
`

type AddUserParams struct {
	Login  string
	Email  string
	Pass   string
	Status string
}

// http: POST /users
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser,
		arg.Login,
		arg.Email,
		arg.Pass,
		arg.Status,
	)
}

const contUsers = `-- name: ContUsers :one
SELECT count(*) FROM user
`

// http: GET /users/count
func (q *Queries) ContUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, contUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT id, login, email, pass, status, created_at, updated_at FROM user WHERE id = ?
`

// http: GET /users/{id}
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.Pass,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeUser = `-- name: RemoveUser :execresult
DELETE FROM user WHERE id = ?
`

// http: DELETE /users/{id}
func (q *Queries) RemoveUser(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeUser, id)
}

const setUserPassword = `-- name: SetUserPassword :execresult
UPDATE user SET pass = ? WHERE id = ?
`

type SetUserPasswordParams struct {
	Pass string
	ID   int64
}

// http: PATCH /users/{id}/pass
func (q *Queries) SetUserPassword(ctx context.Context, arg SetUserPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, setUserPassword, arg.Pass, arg.ID)
}

const validateUserEmail = `-- name: ValidateUserEmail :execresult
UPDATE user SET status = 'VALID' WHERE id = ? AND pass = ?
`

type ValidateUserEmailParams struct {
	ID   int64
	Pass string
}

// http: GET /users/{id}/token/{pass}
func (q *Queries) ValidateUserEmail(ctx context.Context, arg ValidateUserEmailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, validateUserEmail, arg.ID, arg.Pass)
}
