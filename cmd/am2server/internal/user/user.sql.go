// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package user

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :execresult
INSERT INTO user(name, email, status) 
VALUES(?,?,?)
`

type AddUserParams struct {
	Name   string
	Email  string
	Status string
}

// http: POST /users
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser, arg.Name, arg.Email, arg.Status)
}

const contUsers = `-- name: ContUsers :one
SELECT count(*) FROM user
`

// http: GET /users/count
func (q *Queries) ContUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, contUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, status, created_at, updated_at FROM user WHERE id = ?
`

// http: GET /users/{id}
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, status, created_at, updated_at from user WHERE email = ?
`

// http: GET /users
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
