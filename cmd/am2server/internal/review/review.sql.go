// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: review.sql

package review

import (
	"context"
	"database/sql"
)

const addReview = `-- name: AddReview :execresult
INSERT INTO review(user_id, capture_id, rate, comment) 
VALUES(?,?,?,?)
`

type AddReviewParams struct {
	UserID    sql.NullInt64
	CaptureID int64
	Rate      int64
	Comment   sql.NullString
}

// http: POST /reviews
func (q *Queries) AddReview(ctx context.Context, arg AddReviewParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addReview,
		arg.UserID,
		arg.CaptureID,
		arg.Rate,
		arg.Comment,
	)
}

const listReviewsByCapture = `-- name: ListReviewsByCapture :many
SELECT id, user_id, capture_id, rate, comment, created_at, updated_at FROM review
WHERE capture_id = ?
`

// http: GET /captures/{capture_id}/reviews
func (q *Queries) ListReviewsByCapture(ctx context.Context, captureID int64) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviewsByCapture, captureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CaptureID,
			&i.Rate,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReviewsByUser = `-- name: ListReviewsByUser :many
SELECT id, user_id, capture_id, rate, comment, created_at, updated_at FROM review
WHERE user_id = ?
`

// http: GET /users/{user_id}/reviews
func (q *Queries) ListReviewsByUser(ctx context.Context, userID sql.NullInt64) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviewsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CaptureID,
			&i.Rate,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReview = `-- name: RemoveReview :execresult
DELETE FROM review WHERE id = ?
`

// http: DELETE /reviews/{id}
func (q *Queries) RemoveReview(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeReview, id)
}
