// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http). DO NOT EDIT.

package capture

import (
	"database/sql"
	"log/slog"
	"net/http"
	"strconv"
	"time"

	"github.com/walterwanderley/am2manager/cmd/am2server/internal/server"
)

type Service struct {
	querier *Queries
}

func (s *Service) handleGetCapture() http.HandlerFunc {
	type request struct {
		Id int64 `form:"id" json:"id"`
	}
	type response struct {
		ID          int64      `json:"id,omitempty"`
		UserID      *int64     `json:"user_id,omitempty"`
		Name        string     `json:"name,omitempty"`
		Description *string    `json:"description,omitempty"`
		Type        string     `json:"type,omitempty"`
		HasCab      *bool      `json:"has_cab,omitempty"`
		Am2Hash     string     `json:"am2_hash,omitempty"`
		DataHash    string     `json:"data_hash,omitempty"`
		Data        []byte     `json:"data,omitempty"`
		Downloads   int64      `json:"downloads,omitempty"`
		CreatedAt   time.Time  `json:"created_at,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.PathValue("id"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Id = v
			}
		}
		id := req.Id

		result, err := s.querier.GetCapture(r.Context(), id)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "GetCapture")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		var res response
		res.ID = result.ID
		if result.UserID.Valid {
			res.UserID = &result.UserID.Int64
		}
		res.Name = result.Name
		if result.Description.Valid {
			res.Description = &result.Description.String
		}
		res.Type = result.Type
		if result.HasCab.Valid {
			res.HasCab = &result.HasCab.Bool
		}
		res.Am2Hash = result.Am2Hash
		res.DataHash = result.DataHash
		res.Data = result.Data
		res.Downloads = result.Downloads
		res.CreatedAt = result.CreatedAt
		if result.UpdatedAt.Valid {
			res.UpdatedAt = &result.UpdatedAt.Time
		}
		server.Encode(w, r, http.StatusOK, res)
	}
}

func (s *Service) handleRemoveCapture() http.HandlerFunc {
	type request struct {
		Id int64 `form:"id" json:"id"`
	}
	type response struct {
		LastInsertId int64 `json:"last_insert_id"`
		RowsAffected int64 `json:"rows_affected"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.PathValue("id"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Id = v
			}
		}
		id := req.Id

		result, err := s.querier.RemoveCapture(r.Context(), id)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "RemoveCapture")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		lastInsertId, _ := result.LastInsertId()
		rowsAffected, _ := result.RowsAffected()
		server.Encode(w, r, http.StatusOK, response{
			LastInsertId: lastInsertId,
			RowsAffected: rowsAffected,
		})
	}
}

func (s *Service) handleSearchCaptures() http.HandlerFunc {
	type request struct {
		Arg    *string `form:"arg" json:"arg"`
		Offset int64   `form:"offset" json:"offset"`
		Limit  int64   `form:"limit" json:"limit"`
	}
	type response struct {
		ID          int64     `json:"id,omitempty"`
		Name        string    `json:"name,omitempty"`
		Description *string   `json:"description,omitempty"`
		Downloads   int64     `json:"downloads,omitempty"`
		Fav         int64     `json:"fav,omitempty"`
		HasCab      *bool     `json:"has_cab,omitempty"`
		Type        string    `json:"type,omitempty"`
		CreatedAt   time.Time `json:"created_at,omitempty"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.URL.Query().Get("arg"); str != "" {
			req.Arg = &str
		}
		if str := r.URL.Query().Get("offset"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Offset = v
			}
		}
		if str := r.URL.Query().Get("limit"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Limit = v
			}
		}
		var arg SearchCapturesParams
		if req.Arg != nil {
			arg.Arg = sql.NullString{Valid: true, String: *req.Arg}
		}
		arg.Offset = req.Offset
		arg.Limit = req.Limit

		result, err := s.querier.SearchCaptures(r.Context(), arg)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "SearchCaptures")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		res := make([]response, 0)
		for _, r := range result {
			var item response
			item.ID = r.ID
			item.Name = r.Name
			if r.Description.Valid {
				item.Description = &r.Description.String
			}
			item.Downloads = r.Downloads
			item.Fav = r.Fav
			if r.HasCab.Valid {
				item.HasCab = &r.HasCab.Bool
			}
			item.Type = r.Type
			item.CreatedAt = r.CreatedAt
			res = append(res, item)
		}
		server.Encode(w, r, http.StatusOK, res)
	}
}
