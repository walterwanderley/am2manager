// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http). DO NOT EDIT.

package capture

import (
	"database/sql"
	"log/slog"
	"net/http"
	"strconv"
	"time"

	"github.com/walterwanderley/am2manager/cmd/am2server/internal/server"
)

type Service struct {
	querier *Queries
}

func (s *Service) handleSearchCaptures() http.HandlerFunc {
	type request struct {
		Arg    *string `form:"arg" json:"arg"`
		Offset int64   `form:"offset" json:"offset"`
		Limit  int64   `form:"limit" json:"limit"`
	}
	type response struct {
		ID          int64     `json:"id,omitempty"`
		Name        string    `json:"name,omitempty"`
		Description *string   `json:"description,omitempty"`
		Downloads   int64     `json:"downloads,omitempty"`
		HasCab      *bool     `json:"has_cab,omitempty"`
		Type        string    `json:"type,omitempty"`
		CreatedAt   time.Time `json:"created_at,omitempty"`
		DemoLink    *string   `json:"demo_link,omitempty"`
		Rate        *float64  `json:"rate,omitempty"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.URL.Query().Get("arg"); str != "" {
			req.Arg = &str
		}
		if str := r.URL.Query().Get("offset"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Offset = v
			}
		}
		if str := r.URL.Query().Get("limit"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Limit = v
			}
		}
		var arg SearchCapturesParams
		if req.Arg != nil {
			arg.Arg = sql.NullString{Valid: true, String: *req.Arg}
		}
		arg.Offset = req.Offset
		arg.Limit = req.Limit

		result, err := s.querier.SearchCaptures(r.Context(), arg)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "SearchCaptures")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		res := make([]response, 0)
		for _, r := range result {
			var item response
			item.ID = r.ID
			item.Name = r.Name
			if r.Description.Valid {
				item.Description = &r.Description.String
			}
			item.Downloads = r.Downloads
			if r.HasCab.Valid {
				item.HasCab = &r.HasCab.Bool
			}
			item.Type = r.Type
			item.CreatedAt = r.CreatedAt
			if r.DemoLink.Valid {
				item.DemoLink = &r.DemoLink.String
			}
			if r.Rate.Valid {
				item.Rate = &r.Rate.Float64
			}
			res = append(res, item)
		}
		server.Encode(w, r, http.StatusOK, res)
	}
}
