// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: capture.sql

package capture

import (
	"context"
	"database/sql"
	"time"
)

const getCapture = `-- name: GetCapture :one
SELECT id, user_id, name, description, am2_hash, data_hash, data, downloads, created_at, updated_at FROM capture WHERE id = ?
`

// http: GET /captures/{id}
func (q *Queries) GetCapture(ctx context.Context, id int64) (Capture, error) {
	row := q.db.QueryRowContext(ctx, getCapture, id)
	var i Capture
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Am2Hash,
		&i.DataHash,
		&i.Data,
		&i.Downloads,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCaptureFile = `-- name: GetCaptureFile :one
UPDATE capture SET downloads = downloads + 1 WHERE id = ?
RETURNING data, name
`

type GetCaptureFileRow struct {
	Data []byte
	Name string
}

// http: GET /captures/{id}/file
func (q *Queries) GetCaptureFile(ctx context.Context, id int64) (GetCaptureFileRow, error) {
	row := q.db.QueryRowContext(ctx, getCaptureFile, id)
	var i GetCaptureFileRow
	err := row.Scan(&i.Data, &i.Name)
	return i, err
}

const listCaptures = `-- name: ListCaptures :many
SELECT id, name, description, downloads, created_at 
FROM capture
ORDER BY downloads, created_at DESC
`

type ListCapturesRow struct {
	ID          int64
	Name        string
	Description sql.NullString
	Downloads   int64
	CreatedAt   time.Time
}

// http: GET /captures
func (q *Queries) ListCaptures(ctx context.Context) ([]ListCapturesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCaptures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCapturesRow
	for rows.Next() {
		var i ListCapturesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Downloads,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCapture = `-- name: RemoveCapture :execresult
DELETE FROM capture WHERE id = ?
`

// http: DELETE /captures/{id}
func (q *Queries) RemoveCapture(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeCapture, id)
}

const addCapture = `-- name: addCapture :execresult
INSERT INTO capture(user_id, name, description, data, am2_hash, data_hash)
VALUES(?,?,?,?,?,?)
`

type addCaptureParams struct {
	UserID      sql.NullInt64
	Name        string
	Description sql.NullString
	Data        []byte
	Am2Hash     string
	DataHash    string
}

// http: POST /captures
func (q *Queries) addCapture(ctx context.Context, arg addCaptureParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addCapture,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Data,
		arg.Am2Hash,
		arg.DataHash,
	)
}
